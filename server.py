from flask import Flask, render_template, request, jsonify
import os
from werkzeug.utils import secure_filename
import requests

app = Flask(__name__)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥—É—Ç –∏–∑ –ë–î)
levels = [
    {"id": 1, "name": "–ù–∞—á–∏–Ω–∞—é—â–∏–π üü¢", "emoji": "üë∂"},
    {"id": 2, "name": "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π üü†", "emoji": "üôÇ"},
    {"id": 3, "name": "–°—Ä–µ–¥–Ω–∏–π üü°", "emoji": "üòä"},
    {"id": 4, "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π üî¥", "emoji": "üí™"},
    {"id": 5, "name": "–≠–∫—Å–ø–µ—Ä—Ç üü£", "emoji": "üéì"}
]

lessons = {
    1: [
        {"id": 1, "name": "–ê–ª—Ñ–∞–≤–∏—Ç –∏ –∑–≤—É–∫–∏ üî§", "emoji": "üî§", "content": """
        <h2>–†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç üìö</h2>
        <p>–†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 33 –±—É–∫–≤:</p>
        <div class="alphabet">
            <p>–ê –ë –í –ì –î –ï –Å –ñ –ó –ò –ô –ö –õ –ú –ù –û –ü –† –° –¢ –£ –§ –• –¶ –ß –® –© –™ –´ –¨ –≠ –Æ –Ø</p>
        </div>
        <h3>–û—Å–æ–±—ã–µ –∑–≤—É–∫–∏ üîä</h3>
        <ul>
            <li><strong>–Å</strong> - –∑–≤—É–∫ [–π–æ] –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "—ë–ª–∫–∞"</li>
            <li><strong>–ñ</strong> - –∑–≤—É–∫ [–∂] –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "–∂—É–∫"</li>
            <li><strong>–®</strong> - –∑–≤—É–∫ [—à] –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "—à–∞—Ä"</li>
            <li><strong>–©</strong> - –∑–≤—É–∫ [—â] –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "—â—É–∫–∞"</li>
            <li><strong>–¶</strong> - –∑–≤—É–∫ [—Ü] –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "—Ü–≤–µ—Ç–æ–∫"</li>
        </ul>
        <h3>–ü—Ä–∞–∫—Ç–∏–∫–∞ üéØ</h3>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏: "–ú–∞–º–∞ –º—ã–ª–∞ —Ä–∞–º—É"</p>
        <p>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞ –¥–∏–∫—Ç–æ—Ä–æ–º: "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"</p>
        """},
        {"id": 2, "name": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã", "emoji": "üëã", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π..."},
        {"id": 3, "name": "–¶–∏—Ñ—Ä—ã –∏ —á–∏—Å–ª–∞ 1-10 üî¢", "emoji": "üî¢", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Ü–∏—Ñ—Ä..."},
        {"id": 4, "name": "–¶–≤–µ—Ç–∞ üåà", "emoji": "üåà", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Ü–≤–µ—Ç–æ–≤..."},
        {"id": 5, "name": "–°–µ–º—å—è üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "emoji": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Å–µ–º—å–∏..."}
    ],
    2: [
        {"id": 1, "name": "–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏ üçé", "emoji": "üçé", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –µ–¥—ã..."},
        {"id": 2, "name": "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ üìÖ", "emoji": "üìÖ", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏..."},
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏
    ],
}


# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î
class DatabaseManager:
    def __init__(self):
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
        pass

    def get_levels(self):
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        return levels

    def get_lessons(self, level_id):
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        return lessons.get(level_id, [])

    def get_lesson_content(self, level_id, lesson_id):
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        level_lessons = lessons.get(level_id, [])
        for lesson in level_lessons:
            if lesson['id'] == lesson_id:
                return lesson
        return None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
db_manager = DatabaseManager()


@app.route('/')
def index():
    return render_template('index.html', levels=levels, show_lessons=False, show_lesson=False)


@app.route('/level/<int:level_id>')
def show_lessons(level_id):
    lesson_list = db_manager.get_lessons(level_id)
    return render_template('index.html', levels=levels, lessons=lesson_list,
                           current_level=level_id, show_lessons=True, show_lesson=False)


@app.route('/level/<int:level_id>/lesson/<int:lesson_id>')
def show_lesson(level_id, lesson_id):
    lesson = db_manager.get_lesson_content(level_id, lesson_id)
    lesson_list = db_manager.get_lessons(level_id)
    return render_template('index.html', levels=levels, lessons=lesson_list,
                           current_level=level_id, current_lesson=lesson,
                           show_lessons=False, show_lesson=True)


from flask import Flask, render_template, request, jsonify
import os
from werkzeug.utils import secure_filename
import random

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
levels = [
    {"id": 1, "name": "–ù–∞—á–∏–Ω–∞—é—â–∏–π üü¢", "emoji": "üë∂"},
    {"id": 2, "name": "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π üü†", "emoji": "üôÇ"},
    {"id": 3, "name": "–°—Ä–µ–¥–Ω–∏–π üü°", "emoji": "üòä"},
    {"id": 4, "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π üî¥", "emoji": "üí™"},
    {"id": 5, "name": "–≠–∫—Å–ø–µ—Ä—Ç üü£", "emoji": "üéì"}
]

lessons = {
    1: [
        {"id": 1, "name": "–ê–ª—Ñ–∞–≤–∏—Ç –∏ –∑–≤—É–∫–∏ üî§", "emoji": "üî§", "content": """
        <h2>–†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç üìö</h2>
        <p>–†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 33 –±—É–∫–≤:</p>
        <div class="alphabet">
            <p>–ê –ë –í –ì –î –ï –Å –ñ –ó –ò –ô –ö –õ –ú –ù –û –ü –† –° –¢ –£ –§ –• –¶ –ß –® –© –™ –´ –¨ –≠ –Æ –Ø</p>
        </div>
        <h3>–û—Å–æ–±—ã–µ –∑–≤—É–∫–∏ üîä</h3>
        <ul>
            <li><strong>–Å</strong> - –∑–≤—É–∫ [–π–æ] –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "—ë–ª–∫–∞"</li>
            <li><strong>–ñ</strong> - –∑–≤—É–∫ [–∂] –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "–∂—É–∫"</li>
            <li><strong>–®</strong> - –∑–≤—É–∫ [—à] –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "—à–∞—Ä"</li>
            <li><strong>–©</strong> - –∑–≤—É–∫ [—â] –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "—â—É–∫–∞"</li>
            <li><strong>–¶</strong> - –∑–≤—É–∫ [—Ü] –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "—Ü–≤–µ—Ç–æ–∫"</li>
        </ul>
        <h3>–ü—Ä–∞–∫—Ç–∏–∫–∞ üéØ</h3>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏: "–ú–∞–º–∞ –º—ã–ª–∞ —Ä–∞–º—É"</p>
        <p>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞ –¥–∏–∫—Ç–æ—Ä–æ–º: "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"</p>
        """},
        {"id": 2, "name": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è üëã", "emoji": "üëã", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π..."},
        {"id": 3, "name": "–¶–∏—Ñ—Ä—ã –∏ —á–∏—Å–ª–∞ 1-10 üî¢", "emoji": "üî¢", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Ü–∏—Ñ—Ä..."},
        {"id": 4, "name": "–¶–≤–µ—Ç–∞ üåà", "emoji": "üåà", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Ü–≤–µ—Ç–æ–≤..."},
        {"id": 5, "name": "–°–µ–º—å—è üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "emoji": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Å–µ–º—å–∏..."}
    ],
    2: [
        {"id": 1, "name": "–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏ üçé", "emoji": "üçé", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –µ–¥—ã..."},
        {"id": 2, "name": "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ üìÖ", "emoji": "üìÖ", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏..."},
    ],
}


@app.route('/')
def index():
    return render_template('index.html', levels=levels, show_lessons=False, show_lesson=False)


@app.route('/level/<int:level_id>')
def show_lessons(level_id):
    lesson_list = lessons.get(level_id, [])
    return render_template('index.html', levels=levels, lessons=lesson_list,
                           current_level=level_id, show_lessons=True, show_lesson=False)


@app.route('/level/<int:level_id>/lesson/<int:lesson_id>')
def show_lesson(level_id, lesson_id):
    lesson = None
    for l in lessons.get(level_id, []):
        if l['id'] == lesson_id:
            lesson = l
            break

    lesson_list = lessons.get(level_id, [])
    return render_template('index.html', levels=levels, lessons=lesson_list,
                           current_level=level_id, current_lesson=lesson,
                           show_lessons=False, show_lesson=True)


@app.route('/upload_audio', methods=['POST'])
def upload_audio():
    if 'audio' not in request.files:
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})

    file = request.files['audio']
    if file.filename == '':
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})

    if file:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if not file.filename.lower().endswith(('.wav', '.mp3', '.ogg', '.m4a')):
            return jsonify({'error': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã (WAV, MP3, OGG, M4A)'})

        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)

        try:
            file.save(filepath)
            print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")

            # –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
            feedback_options = [
                "–û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ! –í—ã –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å —è–∑—ã–∫–∞!",
                "–•–æ—Ä–æ—à–µ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ, –Ω–æ –Ω—É–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–µ–π.",
                "–ù–µ–ø–ª–æ—Ö–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ç—á–µ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å —Å–æ–≥–ª–∞—Å–Ω—ã–µ –∑–≤—É–∫–∏.",
                "–ù—É–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º –≥–ª–∞—Å–Ω—ã—Ö –∑–≤—É–∫–æ–≤.",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏ —á–µ—Ç—á–µ."
            ]

            score = round(random.uniform(0.6, 0.95), 2)  # –°–ª—É—á–∞–π–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç 60% –¥–æ 95%
            feedback = random.choice(feedback_options)

            return jsonify({
                'success': True,
                'score': score,
                'feedback': feedback,
                'filename': filename
            })

        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}'})

    return jsonify({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'})

@app.route('/telegram_webapp', methods=['GET', 'POST'])
def telegram_webapp():
    return render_template('telegram_webapp.html')

if __name__ == '__main__':
    app.run(debug=True)